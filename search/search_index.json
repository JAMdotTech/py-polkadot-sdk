{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This library specializes in interfacing with a Substrate node; querying storage,  composing extrinsics, SCALE encoding/decoding and providing additional convenience methods  to deal with the features and metadata of the Substrate runtime.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>About installation, initialization and useful background information.</p>"},{"location":"#usage","title":"Usage","text":"<p>Overview of available functionality and how to use it. </p>"},{"location":"#function-reference","title":"Function Reference","text":"<p>Extensive reference of functions and classes in the library.</p>"},{"location":"#examples","title":"Examples","text":"<p>Various code snippets for common use-cases.</p>"},{"location":"#extensions","title":"Extensions","text":"<p>Overview of available extensions; adding or improving existing functionality.</p>"},{"location":"#metadata-docs","title":"Metadata docs","text":"<p>Documentation of Substrate metadata for well known runtimes and how to use it with py-substrate-interface.</p>"},{"location":"#contact-and-support","title":"Contact and Support","text":"<p>For questions, please see the Substrate StackExchange, Github Discussions or  reach out to us on our matrix chat group: Polkascan Technical.</p>"},{"location":"#license","title":"License","text":"<p>https://github.com/polkascan/py-substrate-interface/blob/master/LICENSE</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#batch-call","title":"Batch call","text":"<pre><code>from substrateinterface import SubstrateInterface, Keypair\nfrom substrateinterface.exceptions import SubstrateRequestException\n\nsubstrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\"\n)\n\nkeypair = Keypair.create_from_uri('//Alice')\n\nbalance_call = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty',\n        'value': 1 * 10**15\n    }\n)\n\ncall = substrate.compose_call(\n    call_module='Utility',\n    call_function='batch',\n    call_params={\n        'calls': [balance_call, balance_call]\n    }\n)\n\nextrinsic = substrate.create_signed_extrinsic(\n    call=call,\n    keypair=keypair,\n    era={'period': 64}\n)\n\n\ntry:\n    receipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n\n    print('Extrinsic \"{}\" included in block \"{}\"'.format(\n        receipt.extrinsic_hash, receipt.block_hash\n    ))\n\n    if receipt.is_success:\n\n        print('\u2705 Success, triggered events:')\n        for event in receipt.triggered_events:\n            print(f'* {event.value}')\n\n    else:\n        print('\u26a0\ufe0f Extrinsic Failed: ', receipt.error_message)\n\n\nexcept SubstrateRequestException as e:\n    print(\"Failed to send: {}\".format(e))\n</code></pre>"},{"location":"examples/#fee-info","title":"Fee info","text":"<pre><code>from substrateinterface import SubstrateInterface, Keypair\n\n\n# import logging\n# logging.basicConfig(level=logging.DEBUG)\n\n\nsubstrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\"\n)\n\nkeypair = Keypair.create_from_uri('//Alice')\n\ncall = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty',\n        'value': 1 * 10**15\n    }\n)\n\n# Get payment info\npayment_info = substrate.get_payment_info(call=call, keypair=keypair)\n\nprint(\"Payment info: \", payment_info)\n</code></pre>"},{"location":"examples/#query-a-mapped-storage-function","title":"Query a Mapped storage function","text":"<pre><code>from substrateinterface import SubstrateInterface\n\nsubstrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\"\n)\n\nresult = substrate.query_map(\"System\", \"Account\", max_results=100)\n\nfor account, account_info in result:\n    print(f'* {account.value}: {account_info.value}')\n</code></pre>"},{"location":"examples/#multisig-transaction","title":"Multisig transaction","text":"<pre><code>from substrateinterface import SubstrateInterface, Keypair\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n\nkeypair_alice = Keypair.create_from_uri('//Alice', ss58_format=substrate.ss58_format)\nkeypair_bob = Keypair.create_from_uri('//Bob', ss58_format=substrate.ss58_format)\nkeypair_charlie = Keypair.create_from_uri('//Charlie', ss58_format=substrate.ss58_format)\n\n# Generate multi-sig account from signatories and threshold\nmultisig_account = substrate.generate_multisig_account(\n    signatories=[\n        keypair_alice.ss58_address,\n        keypair_bob.ss58_address,\n        keypair_charlie.ss58_address\n    ],\n    threshold=2\n)\n\ncall = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': keypair_alice.ss58_address,\n        'value': 3 * 10 ** 3\n    }\n)\n\n# Initiate multisig tx\nextrinsic = substrate.create_multisig_extrinsic(call, keypair_alice, multisig_account, era={'period': 64})\n\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n\nif not receipt.is_success:\n    print(f\"\u26a0\ufe0f {receipt.error_message}\")\n    exit()\n\n# Finalize multisig tx with other signatory\nextrinsic = substrate.create_multisig_extrinsic(call, keypair_bob, multisig_account, era={'period': 64})\n\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n\nif receipt.is_success:\n    print(f\"\u2705 {receipt.triggered_events}\")\nelse:\n    print(f\"\u26a0\ufe0f {receipt.error_message}\")\n</code></pre>"},{"location":"examples/#create-and-call-ink-contract","title":"Create and call ink! contract","text":"<pre><code>import os\n\nfrom substrateinterface.contracts import ContractCode, ContractInstance\nfrom substrateinterface import SubstrateInterface, Keypair\n\nsubstrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\"\n)\n\nkeypair = Keypair.create_from_uri('//Alice')\ncontract_address = \"5GhwarrVMH8kjb8XyW6zCfURHbHy3v84afzLbADyYYX6H2Kk\"\n\n# Check if contract is on chain\ncontract_info = substrate.query(\"Contracts\", \"ContractInfoOf\", [contract_address])\n\nif contract_info.value:\n\n    print(f'Found contract on chain: {contract_info.value}')\n\n    # Create contract instance from deterministic address\n    contract = ContractInstance.create_from_address(\n        contract_address=contract_address,\n        metadata_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.json'),\n        substrate=substrate\n    )\nelse:\n\n    # Upload WASM code\n    code = ContractCode.create_from_contract_files(\n        metadata_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.json'),\n        wasm_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.wasm'),\n        substrate=substrate\n    )\n\n    # Deploy contract\n    print('Deploy contract...')\n    contract = code.deploy(\n        keypair=keypair,\n        constructor=\"new\",\n        args={'init_value': True},\n        value=0,\n        gas_limit={'ref_time': 25990000000, 'proof_size': 11990383647911208550},\n        upload_code=True\n    )\n\n    print(f'\u2705 Deployed @ {contract.contract_address}')\n\n# Read current value\nresult = contract.read(keypair, 'get')\nprint('Current value of \"get\":', result.contract_result_data)\n\n# Do a gas estimation of the message\ngas_predit_result = contract.read(keypair, 'flip')\n\nprint('Result of dry-run: ', gas_predit_result.value)\nprint('Gas estimate: ', gas_predit_result.gas_required)\n\n# Do the actual call\nprint('Executing contract call...')\ncontract_receipt = contract.exec(keypair, 'flip', args={\n\n}, gas_limit=gas_predit_result.gas_required)\n\nif contract_receipt.is_success:\n    print(f'Events triggered in contract: {contract_receipt.contract_events}')\nelse:\n    print(f'Error message: {contract_receipt.error_message}')\n\nresult = contract.read(keypair, 'get')\n\nprint('Current value of \"get\":', result.contract_result_data)\n</code></pre>"},{"location":"examples/#historic-balance","title":"Historic balance","text":"<pre><code>from substrateinterface import SubstrateInterface\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n\nblock_number = 10\nblock_hash = substrate.get_block_hash(block_number)\n\nresult = substrate.query(\n    \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"], block_hash=block_hash\n)\n\n\ndef format_balance(amount: int):\n    amount = format(amount / 10**substrate.properties.get('tokenDecimals', 0), \".15g\")\n    return f\"{amount} {substrate.properties.get('tokenSymbol', 'UNIT')}\"\n\n\nbalance = (result.value[\"data\"][\"free\"] + result.value[\"data\"][\"reserved\"])\n\nprint(f\"Balance @ {block_number}: {format_balance(balance)}\")\n</code></pre>"},{"location":"examples/#block-headers-subscription","title":"Block headers subscription","text":"<pre><code>from substrateinterface import SubstrateInterface\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n\n\ndef subscription_handler(obj, update_nr, subscription_id):\n    print(f\"New block #{obj['header']['number']}\")\n\n    block = substrate.get_block(block_number=obj['header']['number'])\n\n    for idx, extrinsic in enumerate(block['extrinsics']):\n        print(f'# {idx}:  {extrinsic.value}')\n\n    if update_nr &gt; 2:\n        return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr}\n\n\nresult = substrate.subscribe_block_headers(subscription_handler)\nprint(result)\n</code></pre>"},{"location":"examples/#storage-subscription","title":"Storage subscription","text":"<pre><code>from substrateinterface import SubstrateInterface\n\nsubstrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\"\n)\n\n\ndef subscription_handler(account_info_obj, update_nr, subscription_id):\n\n    if update_nr == 0:\n        print('Initial account data:', account_info_obj.value)\n\n    if update_nr &gt; 0:\n        # Do something with the update\n        print('Account data changed:', account_info_obj.value)\n\n    # The execution will block until an arbitrary value is returned, which will be the result of the `query`\n    if update_nr &gt; 5:\n        return account_info_obj\n\n\nresult = substrate.query(\"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"],\n                         subscription_handler=subscription_handler)\n\nprint(result)\n</code></pre>"},{"location":"examples/#subscribe-to-multiple-storage-keys","title":"Subscribe to multiple storage keys","text":"<pre><code>from substrateinterface import SubstrateInterface\n\n\ndef subscription_handler(storage_key, updated_obj, update_nr, subscription_id):\n    print(f\"Update for {storage_key.params[0]}: {updated_obj.value}\")\n\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n\n# Accounts to track\nstorage_keys = [\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"]\n    ),\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\"]\n    )\n]\n\nresult = substrate.subscribe_storage(\n    storage_keys=storage_keys, subscription_handler=subscription_handler\n)\n</code></pre>"},{"location":"extensions/","title":"Extensions","text":"<p>The extension framework is designed to enhance and improve search capabilities on top of existing functionality provided  by the Substrate node. </p> <p>It allows for the integration of third-party search indices, which can be easily interchanged with  other data sources that provide the same functionality, as long as they adhere to standardized naming conventions in the extension registry.</p>"},{"location":"extensions/#available-extensions","title":"Available extensions","text":"Name Maintained by Code SubstrateNodeExtension Polkascan Foundation Github PolkascanExtension Polkascan Foundation Github SubsquidExtension Polkascan Foundation Github"},{"location":"extensions/#available-extension-calls","title":"Available extension calls","text":"<code>filter_events</code> Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes <code>filter_extrinsics</code> Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID <code>search_block_number</code> Search corresponding block number for provided <code>block_datetime</code>. the prediction tolerance is provided with <code>block_time</code> <code>get_block_timestamp</code> Return a UNIX timestamp for given <code>block_number</code>."},{"location":"extensions/polkascan-extension/","title":"PolkascanExtension","text":"<p>This extension enables indexes provided by Polkascan Explorer API.</p> <p>Maintained by Polkascan Foundation.</p>"},{"location":"extensions/polkascan-extension/#installation","title":"Installation","text":"<pre><code>pip install substrate-interface-polkascan\n</code></pre>"},{"location":"extensions/polkascan-extension/#initialization","title":"Initialization","text":"<pre><code>from substrateinterface import SubstrateInterface \nfrom substrateinterface_polkascan.extensions import PolkascanExtension\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n\nsubstrate.register_extension(PolkascanExtension(url='http://127.0.0.1:8000/graphql/'))\n</code></pre>"},{"location":"extensions/polkascan-extension/#implemented-extension-calls","title":"Implemented extension calls","text":""},{"location":"extensions/polkascan-extension/#filter-events","title":"Filter events","text":"<pre><code>events = substrate.extensions.filter_events(pallet_name=\"Balances\", event_name=\"Transfer\", page_size=25)\n</code></pre>"},{"location":"extensions/polkascan-extension/#filter-extrinsics","title":"Filter extrinsics","text":"<pre><code>extrinsics = substrate.extensions.filter_extrinsics(\n    ss58_address=\"12L9MSmxHY8YvtZKpA7Vpvac2pwf4wrT3gd2Tx78sCctoXSE\",\n    pallet_name=\"Balances\", call_name=\"transfer_keep_alive\", page_size=25\n)\n</code></pre>"},{"location":"extensions/subsquid-extension/","title":"SubsquidExtension","text":"<p>This extension enables utilisation of Giant Squid indexes provided by Subsquid</p> <p>Maintained by Polkascan Foundation.</p>"},{"location":"extensions/subsquid-extension/#installation","title":"Installation","text":"<pre><code>pip install substrate-interface-subsquid\n</code></pre>"},{"location":"extensions/subsquid-extension/#initialization","title":"Initialization","text":"<pre><code>from substrateinterface import SubstrateInterface\nfrom substrateinterface_subsquid.extensions import SubsquidExtension\n\nsubstrate = SubstrateInterface(url=\"wss://rpc.polkadot.io\")\n\nsubstrate.register_extension(SubsquidExtension(url='https://squid.subsquid.io/gs-explorer-polkadot/graphql'))\n</code></pre>"},{"location":"extensions/subsquid-extension/#implemented-extension-calls","title":"Implemented extension calls","text":""},{"location":"extensions/subsquid-extension/#filter-events","title":"Filter events","text":"<pre><code>events = substrate.extensions.filter_events(\n    pallet_name=\"Balances\", event_name=\"Transfer\", account_id=\"12L9MSmxHY8YvtZKpA7Vpvac2pwf4wrT3gd2Tx78sCctoXSE\", \n    page_size=25\n)\n</code></pre>"},{"location":"extensions/subsquid-extension/#filter-extrinsics","title":"Filter extrinsics","text":"<pre><code>extrinsics = substrate.extensions.filter_extrinsics(\n    ss58_address=\"12L9MSmxHY8YvtZKpA7Vpvac2pwf4wrT3gd2Tx78sCctoXSE\",\n    pallet_name=\"Balances\", call_name=\"transfer_keep_alive\", page_size=25\n)\n</code></pre>"},{"location":"extensions/subsquid-extension/#search-block-number","title":"Search block number","text":"<pre><code>block_datetime = datetime(2020, 7, 12, 0, 0, 0, tzinfo=timezone.utc)\n\nblock_number = substrate.extensions.search_block_number(block_datetime=block_datetime)\n</code></pre>"},{"location":"extensions/substrate-node-extension/","title":"SubstrateNodeExtension","text":"<p>This extensions is meant as a fallback option that uses only existing Substrate RPC methods.  However, it is important to note that this fallback implementation is significantly inefficient, and it is encouraged to utilize third-party search indices where possible for optimal search performance.</p>"},{"location":"extensions/substrate-node-extension/#initialization","title":"Initialization","text":"<pre><code>substrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n# Provide maximum block range (bigger range descreases performance) \nsubstrate.register_extension(SubstrateNodeExtension(max_block_range=100))\n</code></pre>"},{"location":"extensions/substrate-node-extension/#implemented-extension-calls","title":"Implemented extension calls","text":""},{"location":"extensions/substrate-node-extension/#filter_events","title":"filter_events","text":"<pre><code># Returns all `Balances.Transfer` events from the last 30 blocks\nevents = substrate.extensions.filter_events(pallet_name=\"Balances\", event_name=\"Transfer\", block_start=-30)\n</code></pre>"},{"location":"extensions/substrate-node-extension/#filter_extrinsics","title":"filter_extrinsics","text":"<pre><code># All Timestamp extrinsics in block range #3 until #6\nextrinsics = substrate.extensions.filter_extrinsics(pallet_name=\"Timestamp\", block_start=3, block_end=6)\n</code></pre>"},{"location":"extensions/substrate-node-extension/#search_block_number","title":"search_block_number","text":"<pre><code># Search for block number corresponding a specific datetime\nblock_datetime = datetime(2020, 7, 12, 0, 0, 0)\n\nblock_number = substrate.extensions.search_block_number(block_datetime=block_datetime)\n</code></pre>"},{"location":"extensions/substrate-node-extension/#get_block_timestamp","title":"get_block_timestamp","text":"<pre><code># Get timestamp for specific block number\nblock_timestamp = substrate.extensions.get_block_timestamp(block_number)\n</code></pre>"},{"location":"getting-started/common-concepts/","title":"Common concepts","text":""},{"location":"getting-started/common-concepts/#scale","title":"SCALE","text":"<p>Substrate uses a lightweight and efficient  encoding and decoding program to optimize how data is sent and  received over the network. The program used to serialize and deserialize data is called the SCALE codec, with SCALE  being an acronym for Simple Concatenated Aggregate Little-Endian.</p> <p>This library utilizes py-scale-codec for encoding and decoding SCALE, see  this overview for more information how  to encode data from Python.</p>"},{"location":"getting-started/common-concepts/#ss58-address-formatting","title":"SS58 address formatting","text":"<p>SS58 is a simple address format designed for Substrate based chains. For more information about its specification  see the Substrate documentation about SS58</p>"},{"location":"getting-started/common-concepts/#extrinsics","title":"Extrinsics","text":"<p>Extrinsics within Substrate are basically signed transactions, a vehicle to execute a call function within the  Substrate runtime, originated from outside the runtime. More information about extrinsics  on Substrate docs. For more information on which call  functions are available in existing Substrate implementations, refer to  the PySubstrate Metadata Docs</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#install-using-pypi","title":"Install using PyPI","text":"<pre><code>pip install substrate-interface\n</code></pre>"},{"location":"getting-started/installation/#initialization","title":"Initialization","text":"<pre><code>substrate = SubstrateInterface(url=\"ws://127.0.0.1:9944\")\n</code></pre> <p>After connecting certain properties like <code>ss58_format</code> will be determined automatically by querying the RPC node. At  the moment this will work for most <code>MetadataV14</code> and above runtimes like Polkadot, Kusama, Acala, Moonbeam. For  older or runtimes under development the <code>ss58_format</code> (default 42) and other properties should be set manually. </p>"},{"location":"getting-started/installation/#quick-usage","title":"Quick usage","text":""},{"location":"getting-started/installation/#balance-information-of-an-account","title":"Balance information of an account","text":"<pre><code>result = substrate.query('System', 'Account', ['F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T'])\nprint(result.value['data']['free']) # 635278638077956496\n</code></pre>"},{"location":"getting-started/installation/#create-balance-transfer-extrinsic","title":"Create balance transfer extrinsic","text":"<pre><code>call = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo',\n        'value': 1 * 10**12\n    }\n)\nkeypair = Keypair.create_from_uri('//Alice')\nextrinsic = substrate.create_signed_extrinsic(call=call, keypair=keypair)\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n\nprint(f\"Extrinsic '{receipt.extrinsic_hash}' sent and included in block '{receipt.block_hash}'\")\n</code></pre>"},{"location":"reference/base/","title":"Base","text":""},{"location":"reference/base/#substrateinterface.base.SubstrateInterface","title":"<code>SubstrateInterface</code>","text":""},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.__init__","title":"<code>__init__(url=None, websocket=None, ss58_format=None, type_registry=None, type_registry_preset=None, cache_region=None, runtime_config=None, use_remote_preset=False, ws_options=None, auto_discover=True, auto_reconnect=True, config=None)</code>","text":"<p>A specialized class in interfacing with a Substrate node.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>None</code> <code>ss58_format</code> <code>None</code> <code>type_registry</code> <code>None</code> <code>type_registry_preset</code> <code>None</code> <code>cache_region</code> <code>None</code> <code>use_remote_preset</code> <code>False</code> <code>ws_options</code> <code>None</code> <code>config</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.connect_websocket","title":"<code>connect_websocket()</code>","text":"<p>(Re)creates the websocket connection, if the URL contains a 'ws' or 'wss' scheme</p>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.close","title":"<code>close()</code>","text":"<p>Cleans up resources for this instance like active websocket connection and active extensions</p>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.debug_message","title":"<code>debug_message(message: str)</code>  <code>staticmethod</code>","text":"<p>Submits a message to the debug logger</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> required"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.supports_rpc_method","title":"<code>supports_rpc_method(name: str) -&gt; bool</code>","text":"<p>Check if substrate RPC supports given method</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> required <p>Returns:</p> Type Description <code>bool</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.rpc_request","title":"<code>rpc_request(method, params, result_handler=None)</code>","text":"<p>Method that handles the actual RPC request to the Substrate node. The other implemented functions eventually use this method to perform the request.</p> <p>Parameters:</p> Name Type Description Default <code>result_handler</code> <code>None</code> <code>method</code> required <code>params</code> required <p>Returns:</p> Type Description <code>a dict with the parsed result of the request.</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.implements_scaleinfo","title":"<code>implements_scaleinfo() -&gt; Optional[bool]</code>","text":"<p>Returns True if current runtime implementation a <code>PortableRegistry</code> (<code>MetadataV14</code> and higher)</p> <p>Returns:</p> Type Description <code>bool</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_chain_head","title":"<code>get_chain_head()</code>","text":"<p>A pass-though to existing JSONRPC method <code>chain_getHead</code></p>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_chain_finalised_head","title":"<code>get_chain_finalised_head()</code>","text":"<p>A pass-though to existing JSONRPC method <code>chain_getFinalizedHead</code></p>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_hash","title":"<code>get_block_hash(block_id: int = None) -&gt; str</code>","text":"<p>A pass-though to existing JSONRPC method <code>chain_getBlockHash</code></p> <p>Parameters:</p> Name Type Description Default <code>block_id</code> <code>int</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_number","title":"<code>get_block_number(block_hash: str) -&gt; int</code>","text":"<p>A convenience method to get the block number for given block_hash</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> required"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_metadata","title":"<code>get_block_metadata(block_hash=None, decode=True)</code>","text":"<p>A pass-though to existing JSONRPC method <code>state_getMetadata</code>.</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <code>decode</code> <code>True</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_storage_by_key","title":"<code>get_storage_by_key(block_hash: str, storage_key: str)</code>","text":"<p>A pass-though to existing JSONRPC method <code>state_getStorage</code></p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> required <code>storage_key</code> <code>str</code> required"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_runtime_version","title":"<code>get_block_runtime_version(block_hash)</code>","text":"<p>Retrieve the runtime version id of given block_hash</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> required"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.generate_storage_hash","title":"<code>generate_storage_hash(storage_module: str, storage_function: str, params: list = None, hashers: list = None) -&gt; str</code>","text":"<p>Generate a storage key for given module/function</p> <p>Parameters:</p> Name Type Description Default <code>storage_module</code> <code>str</code> required <code>storage_function</code> <code>str</code> required <code>params</code> <code>list</code> <code>None</code> <code>hashers</code> <code>list</code> <code>None</code> <p>Returns:</p> Type Description <code>str Hexstring respresentation of the storage key</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.init_runtime","title":"<code>init_runtime(block_hash=None, block_id=None)</code>","text":"<p>This method is used by all other methods that deals with metadata and types defined in the type registry. It optionally retrieves the block_hash when block_id is given and sets the applicable metadata for that block_hash. Also it applies all the versioned types at the time of the block_hash.</p> <p>Because parsing of metadata and type registry is quite heavy, the result will be cached per runtime id. In the future there could be support for caching backends like Redis to make this cache more persistent.</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <code>block_id</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.query_map","title":"<code>query_map(module: str, storage_function: str, params: Optional[list] = None, block_hash: str = None, max_results: int = None, start_key: str = None, page_size: int = 100, ignore_decoding_errors: bool = True) -&gt; QueryMapResult</code>","text":"<p>Iterates over all key-pairs located at the given module and storage_function. The storage item must be a map.</p> <p>Example:</p> <pre><code>result = substrate.query_map('System', 'Account', max_results=100)\n\nfor account, account_info in result:\n    print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> required <code>storage_function</code> <code>str</code> required <code>params</code> <code>Optional[list]</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <code>max_results</code> <code>int</code> <code>None</code> <code>start_key</code> <code>str</code> <code>None</code> <code>page_size</code> <code>int</code> <code>100</code> <code>ignore_decoding_errors</code> <code>bool</code> <code>True</code> <p>Returns:</p> Type Description <code>QueryMapResult</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.query_multi","title":"<code>query_multi(storage_keys: List[StorageKey], block_hash: Optional[str] = None) -&gt; list</code>","text":"<p>Query multiple storage keys in one request.</p> <p>Example:</p> <pre><code>storage_keys = [\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T\"]\n    ),\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"GSEX8kR4Kz5UZGhvRUCJG93D5hhTAoVZ5tAe6Zne7V42DSi\"]\n    )\n]\n\nresult = substrate.query_multi(storage_keys)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>storage_keys</code> <code>List[StorageKey]</code> required <code>block_hash</code> <code>Optional[str]</code> <code>None</code> <p>Returns:</p> Type Description <code>list of `(storage_key, scale_obj)` tuples</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.query","title":"<code>query(module: str, storage_function: str, params: list = None, block_hash: str = None, subscription_handler: callable = None, raw_storage_key: bytes = None) -&gt; ScaleType</code>","text":"<p>Retrieves the storage entry for given module, function and optional parameters at given block hash.</p> <p>When a subscription_handler callback function is passed, a subscription will be maintained as long as this handler doesn't return a value.</p> <p>Example of subscription handler: <pre><code>def subscription_handler(obj, update_nr, subscription_id):\n\n    if update_nr == 0:\n        print('Initial data:', obj.value)\n\n    if update_nr &gt; 0:\n        # Do something with the update\n        print('data changed:', obj.value)\n\n    # The execution will block until an arbitrary value is returned, which will be the result of the `query`\n    if update_nr &gt; 1:\n        return obj\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> required <code>storage_function</code> <code>str</code> required <code>params</code> <code>list</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <code>subscription_handler</code> <code>callable</code> <code>None</code> <code>raw_storage_key</code> <code>bytes</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleType</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.__query_well_known","title":"<code>__query_well_known(name: str, block_hash: str) -&gt; ScaleType</code>","text":"<p>Query well-known storage keys as defined in Substrate</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> required <code>block_hash</code> <code>str</code> required <p>Returns:</p> Type Description <code>Optional[ScaleType]</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_storage_key","title":"<code>create_storage_key(pallet: str, storage_function: str, params: Optional[list] = None) -&gt; StorageKey</code>","text":"<p>Create a <code>StorageKey</code> instance providing storage function details. See <code>subscribe_storage()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>pallet</code> <code>str</code> required <code>storage_function</code> <code>str</code> required <code>params</code> <code>Optional[list]</code> <code>None</code> <p>Returns:</p> Type Description <code>StorageKey</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.subscribe_storage","title":"<code>subscribe_storage(storage_keys: List[StorageKey], subscription_handler: callable)</code>","text":"<p>Subscribe to provided storage_keys and keep tracking until <code>subscription_handler</code> returns a value</p> <p>Example of a StorageKey: <pre><code>StorageKey.create_from_storage_function(\n    \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"]\n)\n</code></pre></p> <p>Example of a subscription handler: <pre><code>def subscription_handler(storage_key, obj, update_nr, subscription_id):\n\n    if update_nr == 0:\n        print('Initial data:', storage_key, obj.value)\n\n    if update_nr &gt; 0:\n        # Do something with the update\n        print('data changed:', storage_key, obj.value)\n\n    # The execution will block until an arbitrary value is returned, which will be the result of the function\n    if update_nr &gt; 1:\n        return obj\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>storage_keys</code> <code>List[StorageKey]</code> required <code>subscription_handler</code> <code>callable</code> required"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_pending_extrinsics","title":"<code>retrieve_pending_extrinsics() -&gt; list</code>","text":"<p>Retrieves and decodes pending extrinsics from the node's transaction pool</p> <p>Returns:</p> Type Description <code>list of extrinsics</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.runtime_call","title":"<code>runtime_call(api: str, method: str, params: Union[list, dict] = None, block_hash: str = None) -&gt; ScaleType</code>","text":"<p>Calls a runtime API method</p> <p>Parameters:</p> Name Type Description Default <code>api</code> <code>str</code> required <code>method</code> <code>str</code> required <code>params</code> <code>Union[list, dict]</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleType</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_events","title":"<code>get_events(block_hash: str = None) -&gt; list</code>","text":"<p>Convenience method to get events for a certain block (storage call for module 'System' and function 'Events')</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata","title":"<code>get_metadata(block_hash=None)</code>","text":"<p>Returns <code>MetadataVersioned</code> object for given block_hash or chaintip if block_hash is omitted</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>MetadataVersioned</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_runtime_metadata","title":"<code>get_runtime_metadata(block_hash=None)</code>","text":"<p>Retrieves and decodes the metadata for given block or chaintip if block_hash is omitted.</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_scale_object","title":"<code>create_scale_object(type_string: str, data: ScaleBytes = None, block_hash: str = None, **kwargs) -&gt; ScaleType</code>","text":"<p>Convenience method to create a SCALE object of type <code>type_string</code>, this will initialize the runtime automatically at moment of <code>block_hash</code>, or chain tip if omitted.</p> <p>Parameters:</p> Name Type Description Default <code>type_string</code> <code>str</code> required <code>data</code> <code>ScaleBytes</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <code>kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>ScaleType</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.compose_call","title":"<code>compose_call(call_module: str, call_function: str, call_params: dict = None, block_hash: str = None) -&gt; GenericCall</code>","text":"<p>Composes a call payload which can be used in an extrinsic.</p> <p>Parameters:</p> Name Type Description Default <code>call_module</code> <code>str</code> required <code>call_function</code> <code>str</code> required <code>call_params</code> <code>dict</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>GenericCall</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_account_nonce","title":"<code>get_account_nonce(account_address) -&gt; int</code>","text":"<p>Returns current nonce for given account address</p> <p>Parameters:</p> Name Type Description Default <code>account_address</code> required <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_signed_extrinsic","title":"<code>create_signed_extrinsic(call: GenericCall, keypair: Keypair, era: dict = None, nonce: int = None, tip: int = 0, tip_asset_id: int = None, signature: Union[bytes, str] = None) -&gt; GenericExtrinsic</code>","text":"<p>Creates an extrinsic signed by given account details</p> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>GenericCall</code> required <code>keypair</code> <code>Keypair</code> required <code>era</code> <code>dict</code> <code>None</code> <code>nonce</code> <code>int</code> <code>None</code> <code>tip</code> <code>int</code> <code>0</code> <code>tip_asset_id</code> <code>int</code> <code>None</code> <code>signature</code> <code>Union[bytes, str]</code> <code>None</code> <p>Returns:</p> Type Description <code>GenericExtrinsic The signed Extrinsic</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_unsigned_extrinsic","title":"<code>create_unsigned_extrinsic(call: GenericCall) -&gt; GenericExtrinsic</code>","text":"<p>Create unsigned extrinsic for given <code>Call</code></p> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>GenericCall</code> required <p>Returns:</p> Type Description <code>GenericExtrinsic</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.generate_multisig_account","title":"<code>generate_multisig_account(signatories: list, threshold: int) -&gt; MultiAccountId</code>","text":"<p>Generate deterministic Multisig account with supplied signatories and threshold</p> <p>Parameters:</p> Name Type Description Default <code>signatories</code> <code>list</code> required <code>threshold</code> <code>int</code> required <p>Returns:</p> Type Description <code>MultiAccountId</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.create_multisig_extrinsic","title":"<code>create_multisig_extrinsic(call: GenericCall, keypair: Keypair, multisig_account: MultiAccountId, max_weight: Optional[Union[dict, int]] = None, era: dict = None, nonce: int = None, tip: int = 0, tip_asset_id: int = None, signature: Union[bytes, str] = None) -&gt; GenericExtrinsic</code>","text":"<p>Create a Multisig extrinsic that will be signed by one of the signatories. Checks on-chain if the threshold of the multisig account is reached and try to execute the call accordingly.</p> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>GenericCall</code> required <code>keypair</code> <code>Keypair</code> required <code>multisig_account</code> <code>MultiAccountId</code> required <code>max_weight</code> <code>Optional[Union[dict, int]]</code> <code>None</code> <code>era</code> <code>dict</code> <code>None</code> <code>nonce</code> <code>int</code> <code>None</code> <code>tip</code> <code>int</code> <code>0</code> <code>tip_asset_id</code> <code>int</code> <code>None</code> <code>signature</code> <code>Union[bytes, str]</code> <code>None</code> <p>Returns:</p> Type Description <code>GenericExtrinsic</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.submit_extrinsic","title":"<code>submit_extrinsic(extrinsic: GenericExtrinsic, wait_for_inclusion: bool = False, wait_for_finalization: bool = False) -&gt; ExtrinsicReceipt</code>","text":"<p>Submit an extrinsic to the connected node, with the possibility to wait until the extrinsic is included  in a block and/or the block is finalized. The receipt returned provided information about the block and  triggered events</p> <p>Parameters:</p> Name Type Description Default <code>extrinsic</code> <code>GenericExtrinsic</code> required <code>wait_for_inclusion</code> <code>bool</code> <code>False</code> <code>wait_for_finalization</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>ExtrinsicReceipt</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_payment_info","title":"<code>get_payment_info(call: GenericCall, keypair: Keypair)</code>","text":"<p>Retrieves fee estimation via RPC for given extrinsic</p> <p>Parameters:</p> Name Type Description Default <code>call</code> <code>GenericCall</code> required <code>keypair</code> <code>Keypair</code> required <p>Returns:</p> Type Description <code>Dict with payment info</code> <code>E.g. `{'class': 'normal', 'partialFee': 151000000, 'weight': {'ref_time': 143322000}}`</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_type_registry","title":"<code>get_type_registry(block_hash: str = None, max_recursion: int = 4) -&gt; dict</code>","text":"<p>Generates an exhaustive list of which RUST types exist in the runtime specified at given block_hash (or chaintip if block_hash is omitted)</p> <p>MetadataV14 or higher is required.</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> <code>None</code> <code>max_recursion</code> <code>int</code> <code>4</code> <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_type_definition","title":"<code>get_type_definition(type_string: str, block_hash: str = None)</code>","text":"<p>Retrieves SCALE encoding specifications of given type_string</p> <p>Parameters:</p> Name Type Description Default <code>type_string</code> <code>str</code> required <code>block_hash</code> <code>str</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_modules","title":"<code>get_metadata_modules(block_hash=None)</code>","text":"<p>Retrieves a list of modules in metadata for given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_module","title":"<code>get_metadata_module(name, block_hash=None)</code>","text":"<p>Retrieves modules in metadata by name for given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>name</code> required <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>MetadataModule</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_call_functions","title":"<code>get_metadata_call_functions(block_hash=None) -&gt; list</code>","text":"<p>Retrieves a list of all call functions in metadata active for given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_call_function","title":"<code>get_metadata_call_function(module_name: str, call_function_name: str, block_hash: str = None)</code>","text":"<p>Retrieves the details of a call function given module name, call function name and block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>str</code> required <code>call_function_name</code> <code>str</code> required <code>block_hash</code> <code>str</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_events","title":"<code>get_metadata_events(block_hash=None) -&gt; list</code>","text":"<p>Retrieves a list of all events in metadata active for given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_event","title":"<code>get_metadata_event(module_name, event_name, block_hash=None)</code>","text":"<p>Retrieves the details of an event for given module name, call function name and block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> required <code>event_name</code> required <code>block_hash</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_constants","title":"<code>get_metadata_constants(block_hash=None) -&gt; list</code>","text":"<p>Retrieves a list of all constants in metadata active at given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_constant","title":"<code>get_metadata_constant(module_name, constant_name, block_hash=None)</code>","text":"<p>Retrieves the details of a constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> required <code>constant_name</code> required <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>MetadataModuleConstants</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_constant","title":"<code>get_constant(module_name, constant_name, block_hash=None) -&gt; Optional[ScaleType]</code>","text":"<p>Returns the decoded <code>ScaleType</code> object of the constant for given module name, call function name and block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> required <code>constant_name</code> required <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleType</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_storage_functions","title":"<code>get_metadata_storage_functions(block_hash=None) -&gt; list</code>","text":"<p>Retrieves a list of all storage functions in metadata active at given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_storage_function","title":"<code>get_metadata_storage_function(module_name, storage_name, block_hash=None)</code>","text":"<p>Retrieves the details of a storage function for given module name, call function name and block_hash</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> required <code>storage_name</code> required <code>block_hash</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_errors","title":"<code>get_metadata_errors(block_hash=None) -&gt; list</code>","text":"<p>Retrieves a list of all errors in metadata active at given block_hash (or chaintip if block_hash is omitted)</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_error","title":"<code>get_metadata_error(module_name, error_name, block_hash=None)</code>","text":"<p>Retrieves the details of an error for given module name, call function name and block_hash</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> required <code>error_name</code> required <code>block_hash</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_runtime_call_functions","title":"<code>get_metadata_runtime_call_functions() -&gt; list</code>","text":"<p>Get a list of available runtime API calls</p> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_metadata_runtime_call_function","title":"<code>get_metadata_runtime_call_function(api: str, method: str) -&gt; GenericRuntimeCallDefinition</code>","text":"<p>Get details of a runtime API call</p> <p>Parameters:</p> Name Type Description Default <code>api</code> <code>str</code> required <code>method</code> <code>str</code> required <p>Returns:</p> Type Description <code>GenericRuntimeCallDefinition</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block","title":"<code>get_block(block_hash: str = None, block_number: int = None, ignore_decoding_errors: bool = False, include_author: bool = False, finalized_only: bool = False) -&gt; Optional[dict]</code>","text":"<p>Retrieves a block and decodes its containing extrinsics and log digest items. If <code>block_hash</code> and <code>block_number</code> is omited the chain tip will be retrieve, or the finalized head if <code>finalized_only</code> is set to true.</p> <p>Either <code>block_hash</code> or <code>block_number</code> should be set, or both omitted.</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> <code>None</code> <code>block_number</code> <code>int</code> <code>None</code> <code>ignore_decoding_errors</code> <code>bool</code> <code>False</code> <code>include_author</code> <code>bool</code> <code>False</code> <code>finalized_only</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>A dict containing the extrinsic and digest logs data</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_block_header","title":"<code>get_block_header(block_hash: str = None, block_number: int = None, ignore_decoding_errors: bool = False, include_author: bool = False, finalized_only: bool = False)</code>","text":"<p>Retrieves a block header and decodes its containing log digest items. If <code>block_hash</code> and <code>block_number</code> is omited the chain tip will be retrieve, or the finalized head if <code>finalized_only</code> is set to true.</p> <p>Either <code>block_hash</code> or <code>block_number</code> should be set, or both omitted.</p> <p>See <code>get_block()</code> to also include the extrinsics in the result</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> <code>None</code> <code>block_number</code> <code>int</code> <code>None</code> <code>ignore_decoding_errors</code> <code>bool</code> <code>False</code> <code>include_author</code> <code>bool</code> <code>False</code> <code>finalized_only</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>A dict containing the header and digest logs data</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.subscribe_block_headers","title":"<code>subscribe_block_headers(subscription_handler: callable, ignore_decoding_errors: bool = False, include_author: bool = False, finalized_only=False)</code>","text":"<p>Subscribe to new block headers as soon as they are available. The callable <code>subscription_handler</code> will be executed when a new block is available and execution will block until <code>subscription_handler</code> will return a result other than <code>None</code>.</p> <p>Example:</p> <pre><code>def subscription_handler(obj, update_nr, subscription_id):\n\n    print(f\"New block #{obj['header']['number']} produced by {obj['header']['author']}\")\n\n    if update_nr &gt; 10\n      return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr}\n\n\nresult = substrate.subscribe_block_headers(subscription_handler, include_author=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>subscription_handler</code> <code>callable</code> required <code>ignore_decoding_errors</code> <code>bool</code> <code>False</code> <code>include_author</code> <code>bool</code> <code>False</code> <code>finalized_only</code> <code>False</code> <p>Returns:</p> Type Description <code>Value return by `subscription_handler`</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_extrinsic_by_identifier","title":"<code>retrieve_extrinsic_by_identifier(extrinsic_identifier: str) -&gt; ExtrinsicReceipt</code>","text":"<p>Retrieve an extrinsic by its identifier in format \"[block_number]-[extrinsic_index]\" e.g. 333456-4</p> <p>Parameters:</p> Name Type Description Default <code>extrinsic_identifier</code> <code>str</code> required <p>Returns:</p> Type Description <code>ExtrinsicReceipt</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.retrieve_extrinsic_by_hash","title":"<code>retrieve_extrinsic_by_hash(block_hash: str, extrinsic_hash: str) -&gt; ExtrinsicReceipt</code>","text":"<p>Retrieve an extrinsic by providing the block_hash and the extrinsic hash</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> required <code>extrinsic_hash</code> <code>str</code> required <p>Returns:</p> Type Description <code>ExtrinsicReceipt</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.get_extrinsics","title":"<code>get_extrinsics(block_hash: str = None, block_number: int = None) -&gt; list</code>","text":"<p>Return extrinsics for given block_hash or block_number</p> <p>Parameters:</p> Name Type Description Default <code>block_hash</code> <code>str</code> <code>None</code> <code>block_number</code> <code>int</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.decode_scale","title":"<code>decode_scale(type_string, scale_bytes, block_hash=None, return_scale_obj=False)</code>","text":"<p>Helper function to decode arbitrary SCALE-bytes (e.g. 0x02000000) according to given RUST type_string (e.g. BlockNumber). The relevant versioning information of the type (if defined) will be applied if block_hash is set</p> <p>Parameters:</p> Name Type Description Default <code>type_string</code> required <code>scale_bytes</code> required <code>block_hash</code> <code>None</code> <code>return_scale_obj</code> <code>False</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.encode_scale","title":"<code>encode_scale(type_string, value, block_hash=None) -&gt; ScaleBytes</code>","text":"<p>Helper function to encode arbitrary data into SCALE-bytes for given RUST type_string</p> <p>Parameters:</p> Name Type Description Default <code>type_string</code> required <code>value</code> required <code>block_hash</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleBytes</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.ss58_encode","title":"<code>ss58_encode(public_key: Union[str, bytes], ss58_format: int = None) -&gt; str</code>","text":"<p>Helper function to encode a public key to SS58 address.</p> <p>If no target <code>ss58_format</code> is provided, it will default to the ss58 format of the network it's connected to.</p> <p>Parameters:</p> Name Type Description Default <code>public_key</code> <code>Union[str, bytes]</code> required <code>ss58_format</code> <code>int</code> <code>None</code> <p>Returns:</p> Type Description <code>str containing the SS58 address</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.ss58_decode","title":"<code>ss58_decode(ss58_address: str) -&gt; str</code>","text":"<p>Helper function to decode a SS58 address to a public key</p> <p>Parameters:</p> Name Type Description Default <code>ss58_address</code> <code>str</code> required <p>Returns:</p> Type Description <code>str containing the hex representation of the public key</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.is_valid_ss58_address","title":"<code>is_valid_ss58_address(value: str) -&gt; bool</code>","text":"<p>Helper function to validate given value as ss58_address for current network/ss58_format</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> required <p>Returns:</p> Type Description <code>bool</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_storage_item","title":"<code>serialize_storage_item(storage_item, module, spec_version_id) -&gt; dict</code>","text":"<p>Helper function to serialize a storage item</p> <p>Parameters:</p> Name Type Description Default <code>storage_item</code> required <code>module</code> required <code>spec_version_id</code> required <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_constant","title":"<code>serialize_constant(constant, module, spec_version_id) -&gt; dict</code>","text":"<p>Helper function to serialize a constant</p> <p>Parameters:</p> Name Type Description Default <code>constant</code> required <code>module</code> required <code>spec_version_id</code> required <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_call","title":"<code>serialize_module_call(module, call, spec_version, call_index=None) -&gt; dict</code>","text":"<p>Helper function to serialize a call function</p> <p>Parameters:</p> Name Type Description Default <code>module</code> required <code>call</code> required <code>spec_version</code> required <code>call_index</code> <code>None</code> <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_event","title":"<code>serialize_module_event(module, event, spec_version, event_index) -&gt; dict</code>","text":"<p>Helper function to serialize an event</p> <p>Parameters:</p> Name Type Description Default <code>module</code> required <code>event</code> required <code>spec_version</code> required <code>event_index</code> required <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.serialize_module_error","title":"<code>serialize_module_error(module, error, spec_version) -&gt; dict</code>","text":"<p>Helper function to serialize an error</p> <p>Parameters:</p> Name Type Description Default <code>module</code> required <code>error</code> required <code>spec_version</code> required <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.reload_type_registry","title":"<code>reload_type_registry(use_remote_preset: bool = True, auto_discover: bool = True)</code>","text":"<p>Reload type registry and preset used to instantiate the SubtrateInterface object. Useful to periodically apply changes in type definitions when a runtime upgrade occurred</p> <p>Parameters:</p> Name Type Description Default <code>use_remote_preset</code> <code>bool</code> <code>True</code> <code>auto_discover</code> <code>bool</code> <code>True</code>"},{"location":"reference/base/#substrateinterface.base.SubstrateInterface.register_extension","title":"<code>register_extension(extension: Extension)</code>","text":"<p>Register an Extension and adds its functionality to the ExtensionRegistry</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> required"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt","title":"<code>ExtrinsicReceipt</code>","text":"<p>Object containing information of submitted extrinsic. Block hash where extrinsic is included is required     when retrieving triggered events or determine if extrinsic was succesfull</p>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.extrinsic_idx","title":"<code>extrinsic_idx: int</code>  <code>property</code>","text":"<p>Retrieves the index of this extrinsic in containing block</p> <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.extrinsic","title":"<code>extrinsic: GenericExtrinsic</code>  <code>property</code>","text":"<p>Retrieves the <code>Extrinsic</code> subject of this receipt</p> <p>Returns:</p> Type Description <code>Extrinsic</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.triggered_events","title":"<code>triggered_events: list</code>  <code>property</code>","text":"<p>Gets triggered events for submitted extrinsic. block_hash where extrinsic is included is required, manually set block_hash or use <code>wait_for_inclusion</code> when submitting extrinsic</p> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.is_success","title":"<code>is_success: bool</code>  <code>property</code>","text":"<p>Returns <code>True</code> if <code>ExtrinsicSuccess</code> event is triggered, <code>False</code> in case of <code>ExtrinsicFailed</code> In case of False <code>error_message</code> will contain more details about the error</p> <p>Returns:</p> Type Description <code>bool</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.error_message","title":"<code>error_message: Optional[dict]</code>  <code>property</code>","text":"<p>Returns the error message if the extrinsic failed in format e.g.:</p> <p><code>{'type': 'System', 'name': 'BadOrigin', 'docs': 'Bad origin'}</code></p> <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.weight","title":"<code>weight: Union[int, dict]</code>  <code>property</code>","text":"<p>Contains the actual weight when executing this extrinsic</p> <p>Returns:</p> Type Description <code>int(WeightV1) or dict(WeightV2)</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.total_fee_amount","title":"<code>total_fee_amount: int</code>  <code>property</code>","text":"<p>Contains the total fee costs deducted when executing this extrinsic. This includes fee for the validator ( (<code>Balances.Deposit</code> event) and the fee deposited for the treasury (<code>Treasury.Deposit</code> event)</p> <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.__init__","title":"<code>__init__(substrate: SubstrateInterface, extrinsic_hash: str = None, block_hash: str = None, block_number: int = None, extrinsic_idx: int = None, finalized=None)</code>","text":"<p>Object containing information of submitted extrinsic. Block hash where extrinsic is included is required when retrieving triggered events or determine if extrinsic was succesfull</p> <p>Parameters:</p> Name Type Description Default <code>substrate</code> <code>SubstrateInterface</code> required <code>extrinsic_hash</code> <code>str</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <code>finalized</code> <code>None</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.get_extrinsic_identifier","title":"<code>get_extrinsic_identifier() -&gt; str</code>","text":"<p>Returns the on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2</p> <p>Returns:</p> Type Description <code>str</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.create_from_extrinsic_identifier","title":"<code>create_from_extrinsic_identifier(substrate: SubstrateInterface, extrinsic_identifier: str) -&gt; ExtrinsicReceipt</code>  <code>classmethod</code>","text":"<p>Create an <code>ExtrinsicReceipt</code> with on-chain identifier for this extrinsic in format \"[block_number]-[extrinsic_idx]\" e.g. 134324-2</p> <p>Parameters:</p> Name Type Description Default <code>substrate</code> <code>SubstrateInterface</code> required <code>extrinsic_identifier</code> <code>str</code> required <p>Returns:</p> Type Description <code>ExtrinsicReceipt</code>"},{"location":"reference/base/#substrateinterface.base.ExtrinsicReceipt.__get_extrinsic_index","title":"<code>__get_extrinsic_index(block_extrinsics: list, extrinsic_hash: str) -&gt; int</code>  <code>staticmethod</code>","text":"<p>Returns the index of a provided extrinsic</p>"},{"location":"reference/contracts/","title":"Contracts","text":""},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata","title":"<code>ContractMetadata</code>","text":""},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.__init__","title":"<code>__init__(metadata_dict: dict, substrate: SubstrateInterface)</code>","text":"<p>Class using the generated metadata.json file to represent the metadata of a contract. The metadata_dict is parsed and the used types are extracted, composed and added to the type registry of the runtime</p> <p>Parameters:</p> Name Type Description Default <code>metadata_dict</code> <code>dict</code> required <code>substrate</code> <code>SubstrateInterface</code> required"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.create_from_file","title":"<code>create_from_file(metadata_file: str, substrate: SubstrateInterface) -&gt; ContractMetadata</code>  <code>classmethod</code>","text":"<p>Create a new ContractMetadata object using the provided metadata_file, usually generated by the command \"cargo +nightly contract generate-metadata\" in an ink! project</p> <p>Parameters:</p> Name Type Description Default <code>metadata_file</code> <code>str</code> required <code>substrate</code> <code>SubstrateInterface</code> required <p>Returns:</p> Type Description <code>ContractMetadata</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.generate_constructor_data","title":"<code>generate_constructor_data(name, args: dict = None) -&gt; ScaleBytes</code>","text":"<p>Compose the data field used in the \"Contracts.instantiate\" call, finding the selectors and encoded the args of given constructor</p> <p>Parameters:</p> Name Type Description Default <code>name</code> required <code>args</code> <code>dict</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleBytes</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.get_type_string_for_metadata_type","title":"<code>get_type_string_for_metadata_type(type_id: int) -&gt; str</code>","text":"<p>Adds a type included in the metadata (represented by an index in the type list) to the type registry and produces a type string that can be used in the scope of the <code>RuntimeConfigurationObject</code>.</p> <p>Parameters:</p> Name Type Description Default <code>type_id</code> <code>int</code> required <p>Returns:</p> Type Description <code>str</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.generate_message_data","title":"<code>generate_message_data(name, args: dict = None) -&gt; ScaleBytes</code>","text":"<p>Compose the data field used in the \"Contracts.call\" call, finding the selector and encoded the args of provided message name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> required <code>args</code> <code>dict</code> <code>None</code> <p>Returns:</p> Type Description <code>ScaleBytes</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractMetadata.get_event_data","title":"<code>get_event_data(event_id: int) -&gt; dict</code>","text":"<p>Looks up the event data for given 0-based event_id</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>int</code> required"},{"location":"reference/contracts/#substrateinterface.contracts.ContractEvent","title":"<code>ContractEvent</code>","text":"<p>               Bases: <code>ScaleType</code></p>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractEvent.__init__","title":"<code>__init__(*args, contract_metadata: ContractMetadata = None, **kwargs)</code>","text":"<p>ScaleType class containing information about a specific Contract Event, it decodes the \"data\" field in the generic \"Contracts.ContractExecution\" event that is triggered after a successfull \"Contracts.call\" call.</p>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt","title":"<code>ContractExecutionReceipt</code>","text":"<p>               Bases: <code>ExtrinsicReceipt</code></p>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Object extending the <code>ExtrinsicReceipt</code> containing more information about the result after submitting a \"Contracts.call\" extrinsic.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>()</code> <code>kwargs</code> <code>{}</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractExecutionReceipt.create_from_extrinsic_receipt","title":"<code>create_from_extrinsic_receipt(receipt: ExtrinsicReceipt, contract_metadata: ContractMetadata, contract_address: str = None) -&gt; ContractExecutionReceipt</code>  <code>classmethod</code>","text":"<p>Promotes a ExtrinsicReceipt object to a ContractExecutionReceipt. It uses the provided ContractMetadata to decode \"ContractExecution\" events</p> <p>Parameters:</p> Name Type Description Default <code>receipt</code> <code>ExtrinsicReceipt</code> required <code>contract_metadata</code> <code>ContractMetadata</code> required <p>Returns:</p> Type Description <code>ContractExecutionReceipt</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode","title":"<code>ContractCode</code>","text":""},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.__init__","title":"<code>__init__(code_hash: bytes = None, metadata: ContractMetadata = None, wasm_bytes: bytes = None, substrate: SubstrateInterface = None)</code>","text":"<p>Object representing the blueprint of the contract, combining either the code hash and metadata of a contract, or the WASM bytes and metadata</p> <p>Parameters:</p> Name Type Description Default <code>code_hash</code> <code>bytes</code> <code>None</code> <code>metadata</code> <code>ContractMetadata</code> <code>None</code> <code>wasm_bytes</code> <code>bytes</code> <code>None</code> <code>substrate</code> <code>SubstrateInterface</code> <code>None</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.create_from_contract_files","title":"<code>create_from_contract_files(wasm_file: str, metadata_file: str, substrate: SubstrateInterface) -&gt; ContractCode</code>  <code>classmethod</code>","text":"<p>Create a ContractCode providing paths for the WASM binary file and metadata JSON file generated by the ink! project</p> <p>Parameters:</p> Name Type Description Default <code>wasm_file</code> <code>str</code> required <code>metadata_file</code> <code>str</code> required <code>substrate</code> <code>SubstrateInterface</code> required <p>Returns:</p> Type Description <code>ContractCode</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.create_from_code_hash","title":"<code>create_from_code_hash(code_hash: bytes, metadata_file: str, substrate: SubstrateInterface) -&gt; ContractCode</code>  <code>classmethod</code>","text":"<p>Create a ContractCode providing an existing contract code hash and a path to the metadata JSON file</p> <p>Parameters:</p> Name Type Description Default <code>code_hash</code> <code>bytes</code> required <code>metadata_file</code> <code>str</code> required <code>substrate</code> <code>SubstrateInterface</code> required <p>Returns:</p> Type Description <code>ContractCode</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.upload_wasm","title":"<code>upload_wasm(keypair: Keypair, storage_deposit_limit: int = None) -&gt; ExtrinsicReceipt</code>","text":"<p>Created and submits an \"Contracts.upload_code\" extrinsic containing the WASM binary</p> <p>Parameters:</p> Name Type Description Default <code>keypair</code> <code>Keypair</code> required <code>storage_deposit_limit</code> <code>int</code> <code>None</code> <p>Returns:</p> Type Description <code>ExtrinsicReceipt</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractCode.deploy","title":"<code>deploy(keypair: Keypair, constructor: str, args: dict = None, value: int = 0, gas_limit: dict = None, deployment_salt: str = None, upload_code: bool = False, storage_deposit_limit: int = None) -&gt; ContractInstance</code>","text":"<p>Deploys a new instance of the contract after it has been uploaded on-chain, with provided constructor and constructor arguments</p> <p>Parameters:</p> Name Type Description Default <code>keypair</code> <code>Keypair</code> required <code>constructor</code> <code>str</code> required <code>args</code> <code>dict</code> <code>None</code> <code>value</code> <code>int</code> <code>0</code> <code>gas_limit</code> <code>dict</code> <code>None</code> <code>deployment_salt</code> <code>str</code> <code>None</code> <code>upload_code</code> <code>bool</code> <code>False</code> <code>storage_deposit_limit</code> <code>int</code> <code>None</code> <p>Returns:</p> Type Description <code>ContractInstance</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance","title":"<code>ContractInstance</code>","text":""},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.create_from_address","title":"<code>create_from_address(contract_address: str, metadata_file: str, substrate: SubstrateInterface = None) -&gt; ContractInstance</code>  <code>classmethod</code>","text":"<p>Create a ContractInstance object that already exists on-chain providing a SS58-address and the path to the metadata JSON of that contract</p> <p>Parameters:</p> Name Type Description Default <code>contract_address</code> <code>str</code> required <code>metadata_file</code> <code>str</code> required <code>substrate</code> <code>SubstrateInterface</code> <code>None</code> <p>Returns:</p> Type Description <code>ContractInstance</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.read","title":"<code>read(keypair: Keypair, method: str, args: dict = None, value: int = 0, gas_limit: int = None, block_hash: str = None) -&gt; GenericContractExecResult</code>","text":"<p>Used to execute non-mutable messages to for example read data from the contract using getters. Can also be used to predict gas limits and 'dry-run' the execution when a mutable message is used. This method does not submit an extrinsic.</p> <p>Parameters:</p> Name Type Description Default <code>keypair</code> <code>Keypair</code> required <code>method</code> <code>str</code> required <code>args</code> <code>dict</code> <code>None</code> <code>value</code> <code>int</code> <code>0</code> <code>gas_limit</code> <code>int</code> <code>None</code> <code>block_hash</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>GenericContractExecResult</code>"},{"location":"reference/contracts/#substrateinterface.contracts.ContractInstance.exec","title":"<code>exec(keypair: Keypair, method: str, args: dict = None, value: int = 0, gas_limit: Optional[dict] = None, storage_deposit_limit: int = None, wait_for_inclusion: bool = True, wait_for_finalization: bool = False) -&gt; ContractExecutionReceipt</code>","text":"<p>Executes provided message by creating and submitting an extrinsic. To get a gas prediction or perform a 'dry-run' of executing this message, see <code>ContractInstance.read</code>.</p> <p>Parameters:</p> Name Type Description Default <code>keypair</code> <code>Keypair</code> required <code>method</code> <code>str</code> required <code>args</code> <code>dict</code> <code>None</code> <code>value</code> <code>int</code> <code>0</code> <code>gas_limit</code> <code>Optional[dict]</code> <code>None</code> <code>storage_deposit_limit</code> <code>int</code> <code>None</code> <code>wait_for_inclusion</code> <code>bool</code> <code>True</code> <code>wait_for_finalization</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>ContractExecutionReceipt</code>"},{"location":"reference/extensions/","title":"Extensions","text":""},{"location":"reference/extensions/#substrateinterface.extensions.Extension","title":"<code>Extension</code>","text":"<p>Base class of all extensions</p>"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.init","title":"<code>init(substrate: SubstrateInterface)</code>","text":"<p>Initialization process of the extension. This function is being called by the ExtensionRegistry.</p> <p>Parameters:</p> Name Type Description Default <code>substrate</code> <code>SubstrateInterface</code> required"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.close","title":"<code>close()</code>","text":"<p>Cleanup process of the extension. This function is being called by the ExtensionRegistry.</p>"},{"location":"reference/extensions/#substrateinterface.extensions.Extension.debug_message","title":"<code>debug_message(message: str)</code>","text":"<p>Submits a debug message in the logger</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> required"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension","title":"<code>SearchExtension</code>","text":"<p>               Bases: <code>Extension</code></p> <p>Type of <code>Extension</code> that implements functionality to improve and enhance search capability</p>"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.filter_events","title":"<code>filter_events(**kwargs) -&gt; list</code>","text":"<p>Filters events to match provided search criteria e.g. block range, pallet name, accountID in attributes</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>list</code>"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.filter_extrinsics","title":"<code>filter_extrinsics(**kwargs) -&gt; list</code>","text":"<p>Filters extrinsics to match provided search criteria e.g. block range, pallet name, signed by accountID</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>{}</code>"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.search_block_number","title":"<code>search_block_number(block_datetime: datetime, block_time: int = 6, **kwargs) -&gt; int</code>","text":"<p>Search corresponding block number for provided <code>block_datetime</code>. the prediction tolerance is provided with <code>block_time</code></p> <p>Parameters:</p> Name Type Description Default <code>block_datetime</code> <code>datetime</code> required <code>block_time</code> <code>int</code> <code>6</code> <code>kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/extensions/#substrateinterface.extensions.SearchExtension.get_block_timestamp","title":"<code>get_block_timestamp(block_number: int) -&gt; int</code>","text":"<p>Return a UNIX timestamp for given <code>block_number</code>.</p> <p>Parameters:</p> Name Type Description Default <code>block_number</code> <code>int</code> required <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/extensions/#substrateinterface.extensions.SubstrateNodeExtension","title":"<code>SubstrateNodeExtension</code>","text":"<p>               Bases: <code>SearchExtension</code></p> <p>Implementation of <code>SearchExtension</code> using only Substrate RPC methods. Could be significant inefficient.</p>"},{"location":"reference/extensions/#substrateinterface.extensions.SubstrateNodeExtension.search_block_number","title":"<code>search_block_number(block_datetime: datetime, block_time: int = 6, **kwargs) -&gt; int</code>","text":"<p>Search corresponding block number for provided <code>block_datetime</code>. the prediction tolerance is provided with <code>block_time</code></p> <p>Parameters:</p> Name Type Description Default <code>block_datetime</code> <code>datetime</code> required <code>block_time</code> <code>int</code> <code>6</code> <code>kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>int</code>"},{"location":"reference/interfaces/","title":"Interfaces","text":""},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface","title":"<code>ExtensionInterface</code>","text":"<p>Keeps tracks of active extensions and which calls can be made</p>"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.register","title":"<code>register(extension: Extension)</code>","text":"<p>Register an extension instance to the registry and calls initialization</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>Extension</code> required"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.unregister_all","title":"<code>unregister_all()</code>","text":"<p>Unregister all extensions and free used resources and connections</p>"},{"location":"reference/interfaces/#substrateinterface.interfaces.ExtensionInterface.call","title":"<code>call(name: str, *args, **kwargs)</code>","text":"<p>Tries to call extension function with <code>name</code> and provided args and kwargs</p> <p>Will raise a <code>ExtensionCallNotFound</code> when no method is found in current extensions</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> required <code>args</code> <code>()</code> <code>kwargs</code> <code>{}</code>"},{"location":"reference/keypair/","title":"Keypair","text":""},{"location":"reference/keypair/#substrateinterface.keypair.KeypairType","title":"<code>KeypairType</code>","text":"<p>Type of cryptography, used in <code>Keypair</code> instance to encrypt and sign data</p> <ul> <li>ED25519 = 0</li> <li>SR25519 = 1</li> <li>ECDSA = 2</li> </ul>"},{"location":"reference/keypair/#substrateinterface.keypair.MnemonicLanguageCode","title":"<code>MnemonicLanguageCode</code>","text":"<p>Available language codes to generate mnemonics</p> <ul> <li>ENGLISH = 'en'</li> <li>CHINESE_SIMPLIFIED = 'zh-hans'</li> <li>CHINESE_TRADITIONAL = 'zh-hant'</li> <li>FRENCH = 'fr'</li> <li>ITALIAN = 'it'</li> <li>JAPANESE = 'ja'</li> <li>KOREAN = 'ko'</li> <li>SPANISH = 'es'</li> </ul>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair","title":"<code>Keypair</code>","text":""},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.__init__","title":"<code>__init__(ss58_address: str = None, public_key: Union[bytes, str] = None, private_key: Union[bytes, str] = None, ss58_format: int = None, seed_hex: Union[str, bytes] = None, crypto_type: int = KeypairType.SR25519)</code>","text":"<p>Allows generation of Keypairs from a variety of input combination, such as a public/private key combination, mnemonic or URI containing soft and hard derivation paths. With these Keypairs data can be signed and verified</p> <p>Parameters:</p> Name Type Description Default <code>ss58_address</code> <code>str</code> <code>None</code> <code>public_key</code> <code>Union[bytes, str]</code> <code>None</code> <code>private_key</code> <code>Union[bytes, str]</code> <code>None</code> <code>ss58_format</code> <code>int</code> <code>None</code> <code>seed_hex</code> <code>Union[str, bytes]</code> <code>None</code> <code>crypto_type</code> <code>int</code> <code>SR25519</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.generate_mnemonic","title":"<code>generate_mnemonic(words: int = 12, language_code: str = MnemonicLanguageCode.ENGLISH) -&gt; str</code>  <code>classmethod</code>","text":"<p>Generates a new seed phrase with given amount of words (default 12)</p> <p>Parameters:</p> Name Type Description Default <code>words</code> <code>int</code> <code>12</code> <code>language_code</code> <code>str</code> <code>ENGLISH</code> <p>Returns:</p> Name Type Description <code>str</code> <code>Seed phrase</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.validate_mnemonic","title":"<code>validate_mnemonic(mnemonic: str, language_code: str = MnemonicLanguageCode.ENGLISH) -&gt; bool</code>  <code>classmethod</code>","text":"<p>Verify if specified mnemonic is valid</p> <p>Parameters:</p> Name Type Description Default <code>mnemonic</code> <code>str</code> required <code>language_code</code> <code>str</code> <code>ENGLISH</code> <p>Returns:</p> Type Description <code>bool</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_mnemonic","title":"<code>create_from_mnemonic(mnemonic: str, ss58_format=42, crypto_type=KeypairType.SR25519, language_code: str = MnemonicLanguageCode.ENGLISH) -&gt; Keypair</code>  <code>classmethod</code>","text":"<p>Create a Keypair for given memonic</p> <p>Parameters:</p> Name Type Description Default <code>mnemonic</code> <code>str</code> required <code>ss58_format</code> <code>42</code> <code>crypto_type</code> <code>SR25519</code> <code>language_code</code> <code>str</code> <code>ENGLISH</code> <p>Returns:</p> Type Description <code>Keypair</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_seed","title":"<code>create_from_seed(seed_hex: Union[bytes, str], ss58_format: Optional[int] = 42, crypto_type=KeypairType.SR25519) -&gt; Keypair</code>  <code>classmethod</code>","text":"<p>Create a Keypair for given seed</p> <p>Parameters:</p> Name Type Description Default <code>seed_hex</code> <code>Union[bytes, str]</code> required <code>ss58_format</code> <code>Optional[int]</code> <code>42</code> <code>crypto_type</code> <code>SR25519</code> <p>Returns:</p> Type Description <code>Keypair</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_uri","title":"<code>create_from_uri(suri: str, ss58_format: Optional[int] = 42, crypto_type=KeypairType.SR25519, language_code: str = MnemonicLanguageCode.ENGLISH) -&gt; Keypair</code>  <code>classmethod</code>","text":"<p>Creates Keypair for specified suri in following format: <code>[mnemonic]/[soft-path]//[hard-path]</code></p> <p>Parameters:</p> Name Type Description Default <code>suri</code> <code>str</code> required <code>ss58_format</code> <code>Optional[int]</code> <code>42</code> <code>crypto_type</code> <code>SR25519</code> <code>language_code</code> <code>str</code> <code>ENGLISH</code> <p>Returns:</p> Type Description <code>Keypair</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_private_key","title":"<code>create_from_private_key(private_key: Union[bytes, str], public_key: Union[bytes, str] = None, ss58_address: str = None, ss58_format: int = None, crypto_type: int = KeypairType.SR25519) -&gt; Keypair</code>  <code>classmethod</code>","text":"<p>Creates Keypair for specified public/private keys</p> <p>Parameters:</p> Name Type Description Default <code>private_key</code> <code>Union[bytes, str]</code> required <code>public_key</code> <code>Union[bytes, str]</code> <code>None</code> <code>ss58_address</code> <code>str</code> <code>None</code> <code>ss58_format</code> <code>int</code> <code>None</code> <code>crypto_type</code> <code>int</code> <code>SR25519</code> <p>Returns:</p> Type Description <code>Keypair</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.create_from_encrypted_json","title":"<code>create_from_encrypted_json(json_data: Union[str, dict], passphrase: str, ss58_format: int = None) -&gt; Keypair</code>  <code>classmethod</code>","text":"<p>Create a Keypair from a PolkadotJS format encrypted JSON file</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>Union[str, dict]</code> required <code>passphrase</code> <code>str</code> required <code>ss58_format</code> <code>int</code> <code>None</code> <p>Returns:</p> Type Description <code>Keypair</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.export_to_encrypted_json","title":"<code>export_to_encrypted_json(passphrase: str, name: str = None) -&gt; dict</code>","text":"<p>Export Keypair to PolkadotJS format encrypted JSON file</p> <p>Parameters:</p> Name Type Description Default <code>passphrase</code> <code>str</code> required <code>name</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>dict</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.sign","title":"<code>sign(data: Union[ScaleBytes, bytes, str]) -&gt; bytes</code>","text":"<p>Creates a signature for given data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[ScaleBytes, bytes, str]</code> required <p>Returns:</p> Type Description <code>signature in bytes</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.verify","title":"<code>verify(data: Union[ScaleBytes, bytes, str], signature: Union[bytes, str]) -&gt; bool</code>","text":"<p>Verifies data with specified signature</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[ScaleBytes, bytes, str]</code> required <code>signature</code> <code>Union[bytes, str]</code> required <p>Returns:</p> Type Description <code>True if data is signed with this Keypair, otherwise False</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.encrypt_message","title":"<code>encrypt_message(message: Union[bytes, str], recipient_public_key: bytes, nonce: bytes = secrets.token_bytes(24)) -&gt; bytes</code>","text":"<p>Encrypts message with for specified recipient</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Union[bytes, str]</code> required <code>recipient_public_key</code> <code>bytes</code> required <code>nonce</code> <code>bytes</code> <code>token_bytes(24)</code> <p>Returns:</p> Type Description <code>Encrypted message</code>"},{"location":"reference/keypair/#substrateinterface.keypair.Keypair.decrypt_message","title":"<code>decrypt_message(encrypted_message_with_nonce: bytes, sender_public_key: bytes) -&gt; bytes</code>","text":"<p>Decrypts message from a specified sender</p> <p>Parameters:</p> Name Type Description Default <code>encrypted_message_with_nonce</code> <code>bytes</code> required <code>sender_public_key</code> <code>bytes</code> required <p>Returns:</p> Type Description <code>Decrypted message</code>"},{"location":"reference/storage/","title":"Storage","text":""},{"location":"reference/storage/#substrateinterface.storage.StorageKey","title":"<code>StorageKey</code>","text":"<p>A StorageKey instance is a representation of a single state entry.</p> <p>Substrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree. All of Substrate's higher-level storage abstractions are built on top of this simple key-value store.</p>"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.create_from_data","title":"<code>create_from_data(data: bytes, runtime_config: RuntimeConfigurationObject, metadata: GenericMetadataVersioned, value_scale_type: str = None, pallet: str = None, storage_function: str = None) -&gt; StorageKey</code>  <code>classmethod</code>","text":"<p>Create a StorageKey instance providing raw storage key bytes</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> required <code>runtime_config</code> <code>RuntimeConfigurationObject</code> required <code>metadata</code> <code>GenericMetadataVersioned</code> required <code>value_scale_type</code> <code>str</code> <code>None</code> <code>pallet</code> <code>str</code> <code>None</code> <code>storage_function</code> <code>str</code> <code>None</code> <p>Returns:</p> Type Description <code>StorageKey</code>"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.create_from_storage_function","title":"<code>create_from_storage_function(pallet: str, storage_function: str, params: list, runtime_config: RuntimeConfigurationObject, metadata: GenericMetadataVersioned) -&gt; StorageKey</code>  <code>classmethod</code>","text":"<p>Create a StorageKey instance providing storage function details</p> <p>Parameters:</p> Name Type Description Default <code>pallet</code> <code>str</code> required <code>storage_function</code> <code>str</code> required <code>params</code> <code>list</code> required <code>runtime_config</code> <code>RuntimeConfigurationObject</code> required <code>metadata</code> <code>GenericMetadataVersioned</code> required <p>Returns:</p> Type Description <code>StorageKey</code>"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.to_hex","title":"<code>to_hex() -&gt; str</code>","text":"<p>Returns a Hex-string representation of current StorageKey data</p> <p>Returns:</p> Type Description <code>str</code> <p>Hex string</p>"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.generate","title":"<code>generate() -&gt; bytes</code>","text":"<p>Generate a storage key for current specified pallet/function/params</p> <p>Returns:</p> Type Description <code>bytes</code>"},{"location":"reference/storage/#substrateinterface.storage.StorageKey.decode_scale_value","title":"<code>decode_scale_value(data: Optional[ScaleBytes] = None) -&gt; ScaleType</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>Optional[ScaleBytes]</code> <code>None</code>"},{"location":"usage/call-runtime-apis/","title":"Call runtime APIs","text":"<p>Each Substrate node contains a runtime. The runtime contains the business logic of the chain. It defines what  transactions are valid and invalid and determines how the chain's state changes in response to transactions. </p> <p>A Runtime API facilitates this kind of communication between the outer node and the runtime.  More information about Runtime APIs</p>"},{"location":"usage/call-runtime-apis/#example","title":"Example","text":"<pre><code>result = substrate.runtime_call(\"AccountNonceApi\", \"account_nonce\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"])\n# &lt;U32(value=2)&gt;\n</code></pre>"},{"location":"usage/call-runtime-apis/#list-of-available-runtime-apis-and-methods","title":"List of available runtime APIs and methods","text":"<pre><code>runtime_calls = substrate.get_metadata_runtime_call_functions()\n#[\n#    &lt;RuntimeCallDefinition(value={'description': 'The API to query account nonce (aka transaction index)', 'params': [{'name': 'account_id', 'type': 'AccountId'}], 'type': 'Index', 'api': 'AccountNonceApi', 'method': 'account_nonce'})&gt;\n#    ...\n#]\n</code></pre>"},{"location":"usage/call-runtime-apis/#get-param-type-decomposition","title":"Get param type decomposition","text":"<p>A helper function to compose the parameters for this runtime API call</p> <pre><code>runtime_call = substrate.get_metadata_runtime_call_function(\"ContractsApi\", \"call\")\nparam_info = runtime_call.get_param_info()\n# ['AccountId', 'AccountId', 'u128', 'u64', (None, 'u128'), 'Bytes']\n</code></pre>"},{"location":"usage/cleanup-and-context-manager/","title":"Cleanup and context manager","text":"<p>At the end of the lifecycle of a <code>SubstrateInterface</code> instance, calling the <code>close()</code> method will do all the necessary  cleanup, like closing the websocket connection.</p> <p>When using the context manager this will be done automatically:</p> <pre><code>with SubstrateInterface(url=\"wss://rpc.polkadot.io\") as substrate:\n    events = substrate.query(\"System\", \"Events\")\n\n# connection is now closed\n</code></pre>"},{"location":"usage/extensions/","title":"Extensions","text":"<p>Moved to main section \"Extensions\" </p>"},{"location":"usage/extrinsics/","title":"Extrinsics","text":"<p>In Substrate, transactions are often more broadly referred to as (signed) extrinsics. The term extrinsic is generally  used to mean any information that originates outside of the runtime. An extrinsic is basically a vehicle that carries the intention to execute a function call in the runtime, along with proof of the account that wants to execute it.</p>"},{"location":"usage/extrinsics/#creating-extrinsics","title":"Creating extrinsics","text":"<p>See the metadata documentation for more information how to compose specific calls for several Substrate runtimes.</p> <p>Example:</p> <pre><code>call = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': '5E9oDs9PjpsBbxXxRE9uMaZZhnBAV38n2ouLB28oecBDdeQo',\n        'value': 1 * 10**12\n    }\n)\n\nextrinsic = substrate.create_signed_extrinsic(call=call, keypair=keypair)\n\ntry:\n    receipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n    print(f\"Extrinsic '{receipt.extrinsic_hash}' sent and included in block '{receipt.block_hash}'\")\n\nexcept SubstrateRequestException as e:\n    print(\"Failed to send: {}\".format(e))\n</code></pre> <p>The <code>wait_for_inclusion</code> keyword argument used in the example above will block giving the result until it gets  confirmation from the node that the extrinsic is succesfully included in a block. The <code>wait_for_finalization</code> keyword will wait until extrinsic is finalized. Note this feature is only available for websocket connections.</p>"},{"location":"usage/extrinsics/#extrinsic-receipts","title":"Extrinsic Receipts","text":"<p>The <code>substrate.submit_extrinsic()</code> example above returns an <code>ExtrinsicReceipt</code> object, which contains information about the on-chain  execution of the extrinsic. Because the <code>block_hash</code> is necessary to retrieve the triggered events from storage, most information is only available when <code>wait_for_inclusion=True</code> or <code>wait_for_finalization=True</code> is used when submitting an extrinsic. </p> <p>Examples: <pre><code>receipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\nprint(receipt.is_success) # False\nprint(receipt.weight) # 216625000\nprint(receipt.total_fee_amount) # 2749998966\nprint(receipt.error_message['name']) # 'LiquidityRestrictions'\n</code></pre></p> <p><code>ExtrinsicReceipt</code> objects can also be created for all existing extrinsics on-chain:</p> <pre><code>receipt = substrate.retrieve_extrinsic_by_identifier(\"5233297-1\")\n\nprint(receipt.is_success) # False\nprint(receipt.extrinsic.call_module.name) # 'Identity'\nprint(receipt.extrinsic.call.name) # 'remove_sub'\nprint(receipt.weight) # 359262000\nprint(receipt.total_fee_amount) # 2483332406\nprint(receipt.error_message['docs']) # [' Sender is not a sub-account.']\n\nfor event in receipt.triggered_events:\n    print(f'* {event.value}')\n</code></pre>"},{"location":"usage/extrinsics/#multisig-extrinsics","title":"Multisig extrinsics","text":"<p>Substrate has the functionality for multi-signature dispatch, allowing multiple signed origins (accounts) to coordinate  and dispatch a call, derivable deterministically from the set of account IDs and the threshold number of accounts from  the set that must approve it.</p> <p>To initiate and finalize multisig extrinsics, the following helper functions are available:</p> <p>Define the multisig account by supplying its signatories and threshold: <pre><code>keypair_alice = Keypair.create_from_uri('//Alice', ss58_format=substrate.ss58_format)\n\nmultisig_account = substrate.generate_multisig_account(\n    signatories=[\n        keypair_alice.ss58_address, \n        '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty', \n        '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y'\n    ], \n    threshold=2\n)\n</code></pre></p> <p>Then initiate the multisig extrinsic by providing the call and a keypair of one of its signatories:</p> <pre><code>call = substrate.compose_call(\n    call_module='System',\n    call_function='remark_with_event',\n    call_params={\n        'remark': 'Multisig test'\n    }\n)\n\nextrinsic = substrate.create_multisig_extrinsic(call, keypair_alice, multisig_account, era={'period': 64})\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n</code></pre> <p>Then a second signatory approves and finalizes the call by providing the same call to another multisig extrinsic:</p> <pre><code># Define the multisig account by supplying its signatories and threshold\nkeypair_charlie = Keypair.create_from_uri('//Charlie', ss58_format=substrate.ss58_format)\n\nmultisig_account = substrate.generate_multisig_account(\n    signatories=[\n        keypair_charlie.ss58_address, \n        '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY', \n        '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y'\n    ], \n    threshold=2\n)\n\nextrinsic = substrate.create_multisig_extrinsic(call, keypair_charlie, multisig_account, era={'period': 64})\nreceipt = substrate.submit_extrinsic(extrinsic, wait_for_inclusion=True)\n</code></pre> <p>The call will be executed when the second and final multisig extrinsic is submitted, condition and state of the multig  will be checked on-chain during processing of the multisig extrinsic.</p>"},{"location":"usage/extrinsics/#type-decomposition-of-call-params","title":"Type decomposition of call params","text":"<p>The structure of certain call parameters can be quite complex, then the <code>get_param_info()</code> function of the call function object can provide more insight how to construct those parameters:</p> <pre><code>call_function = substrate.get_metadata_call_function(\"XTokens\", \"transfer\")\n\nparam_info = call_function.get_param_info()\n# {\n#   'currency_id': {\n#       'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), \n#       'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'TAP', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16', 'StableAssetPoolToken': 'u32'}), \n#       'Erc20': '[u8; 20]', \n#       'StableAssetPoolToken': 'u32', \n#       'LiquidCrowdloan': 'u32', \n#       'ForeignAsset': 'u16'\n#   }, \n#   'amount': 'u128', \n#   'dest': {\n#       'V0': {'Null': None, 'X1': {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parent': None, 'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}, \n#       'V1': {'parents': 'u8', 'interior': {'Here': None, 'X1': {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, 'X2': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X3': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X4': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X5': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X6': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X7': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}), 'X8': ({'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}}, {'Parachain': 'u32', 'AccountId32': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'id': '[u8; 32]'}, 'AccountIndex64': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'index': 'u64'}, 'AccountKey20': {'network': {'Any': None, 'Named': 'Bytes', 'Polkadot': None, 'Kusama': None}, 'key': '[u8; 20]'}, 'PalletInstance': 'u8', 'GeneralIndex': 'u128', 'GeneralKey': 'Bytes', 'OnlyChild': None, 'Plurality': {'id': {'Unit': None, 'Named': 'Bytes', 'Index': 'u32', 'Executive': None, 'Technical': None, 'Legislative': None, 'Judicial': None}, 'part': {'Voice': None, 'Members': {'count': 'u32'}, 'Fraction': {'nom': 'u32', 'denom': 'u32'}, 'AtLeastProportion': {'nom': 'u32', 'denom': 'u32'}, 'MoreThanProportion': {'nom': 'u32', 'denom': 'u32'}}}})}}\n#    }, \n#   'dest_weight': 'u64'\n#}\n</code></pre>"},{"location":"usage/extrinsics/#estimate-of-network-fees","title":"Estimate of network fees","text":"<pre><code>payment_info = substrate.get_payment_info(call=call, keypair=keypair)\n# {'class': 'normal', 'partialFee': 2499999066, 'weight': 216625000}\n</code></pre>"},{"location":"usage/extrinsics/#mortal-extrinsics","title":"Mortal extrinsics","text":"<p>By default, immortal extrinsics are created, which means they have an indefinite lifetime for being included in a  block. However, it is recommended to use specify an expiry window, so you know after a certain amount of time if the  extrinsic is not included in a block, it will be invalidated.</p> <pre><code>extrinsic = substrate.create_signed_extrinsic(call=call, keypair=keypair, era={'period': 64})\n</code></pre> <p>The <code>period</code> specifies the number of blocks the extrinsic is valid counted from current head.</p>"},{"location":"usage/ink-contract-interfacing/","title":"ink! contract interfacing","text":"<p>ink! is a programming language for smart contracts; blockchains built with the Substrate framework can choose from a  number of smart contract languages which one(s) they want to support. ink! is one of them. It is an opinionated  language that we have built by extending the popular Rust programming language with functionality needed to make  it smart contract compatible.</p> <p>More information about ink!</p>"},{"location":"usage/ink-contract-interfacing/#deploy-a-contract","title":"Deploy a contract","text":"<p>Tested on substrate-contracts-node with the Flipper contract from the tutorial:</p> <pre><code>substrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\",\n    type_registry_preset='canvas'\n)\n\nkeypair = Keypair.create_from_uri('//Alice')\n\n# Deploy contract\ncode = ContractCode.create_from_contract_files(\n    metadata_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.json'),\n    wasm_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.wasm'),\n    substrate=substrate\n)\n\ncontract = code.deploy(\n    keypair=keypair,\n    endowment=0,\n    gas_limit=1000000000000,\n    constructor=\"new\",\n    args={'init_value': True},\n    upload_code=True\n)\n\nprint(f'\u2705 Deployed @ {contract.contract_address}')\n</code></pre>"},{"location":"usage/ink-contract-interfacing/#work-with-an-existing-instance","title":"Work with an existing instance:","text":"<pre><code># Create contract instance from deterministic address\ncontract = ContractInstance.create_from_address(\n    contract_address=contract_address,\n    metadata_file=os.path.join(os.path.dirname(__file__), 'assets', 'flipper.json'),\n    substrate=substrate\n)\n</code></pre>"},{"location":"usage/ink-contract-interfacing/#read-data-from-a-contract","title":"Read data from a contract:","text":"<pre><code>result = contract.read(keypair, 'get')\nprint('Current value of \"get\":', result.contract_result_data)\n</code></pre>"},{"location":"usage/ink-contract-interfacing/#execute-a-contract-call","title":"Execute a contract call","text":"<pre><code># Do a gas estimation of the message\ngas_predit_result = contract.read(keypair, 'flip')\n\nprint('Result of dry-run: ', gas_predit_result.value)\nprint('Gas estimate: ', gas_predit_result.gas_required)\n\n# Do the actual call\nprint('Executing contract call...')\ncontract_receipt = contract.exec(keypair, 'flip', args={\n\n}, gas_limit=gas_predit_result.gas_required)\n\nif contract_receipt.is_success:\n    print(f'Events triggered in contract: {contract_receipt.contract_events}')\nelse:\n    print(f'Error message: {contract_receipt.error_message}')\n</code></pre> <p>See complete code example for more details</p>"},{"location":"usage/keypair-creation-and-signing/","title":"Keypair creation and signing","text":"<p>Keypairs are used to sign transactions and encrypt/decrypt messages. They consist of a public/private key and can be  generated in several ways like by a BIP39 mnemonic:</p> <pre><code>mnemonic = Keypair.generate_mnemonic()\nkeypair = Keypair.create_from_mnemonic(mnemonic)\nsignature = keypair.sign(\"Test123\")\nif keypair.verify(\"Test123\", signature):\n    print('Verified')\n</code></pre> <p>By default, a keypair is using SR25519  cryptography, alternatively ED25519 and ECDSA (for Ethereum-style addresses) can be explicitly specified:</p> <pre><code>keypair = Keypair.create_from_mnemonic(mnemonic, crypto_type=KeypairType.ECDSA)\nprint(keypair.ss58_address)\n# '0x6741864968e8b87c6e32e19cde88A11a3Cc636E9'\n</code></pre>"},{"location":"usage/keypair-creation-and-signing/#creating-keypairs-with-soft-and-hard-key-derivation-paths","title":"Creating keypairs with soft and hard key derivation paths","text":"<pre><code>mnemonic = Keypair.generate_mnemonic()\nkeypair = Keypair.create_from_uri(mnemonic + '//hard/soft')\n</code></pre> <p>By omitting the mnemonic the default development mnemonic is used: </p> <pre><code>keypair = Keypair.create_from_uri('//Alice')\n</code></pre>"},{"location":"usage/keypair-creation-and-signing/#creating-ecdsa-keypairs-with-bip44-derivation-paths","title":"Creating ECDSA keypairs with BIP44 derivation paths","text":"<pre><code>mnemonic = Keypair.generate_mnemonic()\nkeypair = Keypair.create_from_uri(f\"{mnemonic}/m/44'/60'/0'/0/0\", crypto_type=KeypairType.ECDSA)\n</code></pre>"},{"location":"usage/keypair-creation-and-signing/#create-keypair-from-polkadotjs-json-format","title":"Create Keypair from PolkadotJS JSON format","text":"<pre><code>with open('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY.json', 'r') as fp:\n    json_data = fp.read()\n    keypair = Keypair.create_from_encrypted_json(json_data, passphrase=\"test\", ss58_format=42)\n</code></pre>"},{"location":"usage/keypair-creation-and-signing/#verify-generated-signature-with-public-address","title":"Verify generated signature with public address","text":"<p>Example: Substrate style addresses <pre><code>keypair = Keypair.create_from_uri(\"//Alice\", crypto_type=KeypairType.SR25519)\nsignature = keypair.sign('test')\n\nkeypair_public = Keypair(ss58_address='5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY', crypto_type=KeypairType.SR25519)\nresult = keypair_public.verify('test', signature)\n</code></pre></p> <p>Example: Ethereum style addresses <pre><code>keypair = Keypair.create_from_uri(\"/m/44'/60/0'/0\", crypto_type=KeypairType.ECDSA)\nsignature = keypair.sign('test')\n\nkeypair_public = Keypair(public_key='0x5e20a619338338772e97aa444e001043da96a43b', crypto_type=KeypairType.ECDSA)\nresult = keypair_public.verify('test', signature)\n</code></pre></p>"},{"location":"usage/keypair-creation-and-signing/#offline-signing-of-extrinsics","title":"Offline signing of extrinsics","text":"<p>This example generates a signature payload which can be signed on another (offline) machine and later on sent to the  network with the generated signature.</p> <ol> <li> <p>Generate signature payload on online machine: <pre><code>substrate = SubstrateInterface(\n    url=\"ws://127.0.0.1:9944\",\n    ss58_format=42,\n    type_registry_preset='substrate-node-template',\n)\n\ncall = substrate.compose_call(\n    call_module='Balances',\n    call_function='transfer_keep_alive',\n    call_params={\n        'dest': '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY',\n        'value': 2 * 10**8\n    }\n)\n\nera = {'period': 64, 'current': 22719}\nnonce = 0\n\nsignature_payload = substrate.generate_signature_payload(call=call, era=era, nonce=nonce)\n</code></pre></p> </li> <li> <p>Then on another (offline) machine generate the signature with given <code>signature_payload</code>:</p> </li> </ol> <pre><code>keypair = Keypair.create_from_mnemonic(\"nature exchange gasp toy result bacon coin broccoli rule oyster believe lyrics\")\nsignature = keypair.sign(signature_payload)\n</code></pre> <ol> <li>Finally on the online machine send the extrinsic with generated signature:</li> </ol> <pre><code>keypair = Keypair(ss58_address=\"5EChUec3ZQhUvY1g52ZbfBVkqjUY9Kcr6mcEvQMbmd38shQL\")\n\nextrinsic = substrate.create_signed_extrinsic(\n    call=call,\n    keypair=keypair,\n    era=era,\n    nonce=nonce,\n    signature=signature\n)\n\nresult = substrate.submit_extrinsic(\n    extrinsic=extrinsic\n)\n\nprint(result.extrinsic_hash)\n</code></pre>"},{"location":"usage/query-storage/","title":"Query storage","text":"<p>In Substrate, any pallet can introduce new storage items that will become part of the blockchain state. These storage  items can be simple single values, or more complex storage maps.</p> <p>The runtime exposes several storage functions to query those storage items and are provided in the metadata.  See the metadata documentation for more information of available storage functions for several Substrate runtimes.</p>"},{"location":"usage/query-storage/#example","title":"Example","text":"<pre><code>result = substrate.query('System', 'Account', ['F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T'])\n\nprint(result.value['nonce']) #  7695\nprint(result.value['data']['free']) # 635278638077956496\n</code></pre>"},{"location":"usage/query-storage/#state-at-a-specific-block-hash","title":"State at a specific block hash","text":"<pre><code>account_info = substrate.query(\n    module='System',\n    storage_function='Account',\n    params=['F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T'],\n    block_hash='0x176e064454388fd78941a0bace38db424e71db9d5d5ed0272ead7003a02234fa'\n)\n\nprint(account_info['nonce'].value) #  7673\nprint(account_info['data']['free'].value) # 637747267365404068\n</code></pre>"},{"location":"usage/query-storage/#type-decomposition-information","title":"Type decomposition information","text":"<p>Some storage functions need parameters and some of those parameter types can be quite complex to compose.</p> <p>To retrieve more information how to format those storage function parameters, the helper function <code>get_param_info()</code> is available:</p> <pre><code>storage_function = substrate.get_metadata_storage_function(\"Tokens\", \"TotalIssuance\")\n\nprint(storage_function.get_param_info())\n# [{\n#   'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), \n#   'DexShare': ({'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}, {'Token': ('ACA', 'AUSD', 'DOT', 'LDOT', 'RENBTC', 'CASH', 'KAR', 'KUSD', 'KSM', 'LKSM', 'TAI', 'BNC', 'VSKSM', 'PHA', 'KINT', 'KBTC'), 'Erc20': '[u8; 20]', 'LiquidCrowdloan': 'u32', 'ForeignAsset': 'u16'}), \n#   'Erc20': '[u8; 20]', \n#   'StableAssetPoolToken': 'u32', \n#   'LiquidCrowdloan': 'u32', \n#   'ForeignAsset': 'u16'\n# }]\n</code></pre>"},{"location":"usage/query-storage/#querying-multiple-storage-entries-at-once","title":"Querying multiple storage entries at once","text":"<p>When a large amount of storage entries is requested, the most efficient way is to use the <code>query_multi()</code> function.  This will batch all the requested storage entries in one RPC request. </p> <pre><code>storage_keys = [\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"F4xQKRUagnSGjFqafyhajLs94e7Vvzvr8ebwYJceKpr8R7T\"]\n    ),\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"GSEX8kR4Kz5UZGhvRUCJG93D5hhTAoVZ5tAe6Zne7V42DSi\"]\n    ),\n    substrate.create_storage_key(\n        \"Staking\", \"Bonded\", [\"GSEX8kR4Kz5UZGhvRUCJG93D5hhTAoVZ5tAe6Zne7V42DSi\"]\n    )\n]\n\nresult = substrate.query_multi(storage_keys)\n\nfor storage_key, value_obj in result:\n    print(storage_key, value_obj)\n</code></pre>"},{"location":"usage/query-storage/#query-a-mapped-storage-function","title":"Query a mapped storage function","text":"<p>Mapped storage functions can be iterated over all key/value pairs, for these type of storage functions <code>query_map()</code>  can be used.</p> <p>The result is a <code>QueryMapResult</code> object, which is an iterator:</p> <pre><code># Retrieve the first 199 System.Account entries\nresult = substrate.query_map('System', 'Account', max_results=199)\n\nfor account, account_info in result:\n    print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\")\n</code></pre> <p>These results are transparently retrieved in batches capped by the <code>page_size</code> kwarg, currently the  maximum <code>page_size</code> restricted by the RPC node is 1000    </p> <pre><code># Retrieve all System.Account entries in batches of 200 (automatically appended by `QueryMapResult` iterator)\nresult = substrate.query_map('System', 'Account', page_size=200, max_results=400)\n\nfor account, account_info in result:\n    print(f\"Free balance of account '{account.value}': {account_info.value['data']['free']}\")\n</code></pre> <p>Querying a <code>DoubleMap</code> storage function:</p> <pre><code>era_stakers = substrate.query_map(\n    module='Staking',\n    storage_function='ErasStakers',\n    params=[2100]\n)\n</code></pre>"},{"location":"usage/subscriptions/","title":"Subscriptions","text":"<p>It is possible to create subscriptions for certain data to get updates pushed as they happen. These subscriptions are  blocking until the subscription is closed.</p>"},{"location":"usage/subscriptions/#storage-subscriptions","title":"Storage subscriptions","text":"<p>When a callable is passed as kwarg <code>subscription_handler</code> in the <code>query()</code> function, there will be a subscription  created for given storage query. Updates will be pushed to the callable and will block execution until a final value  is returned. This value will be returned as a result of the query and finally automatically unsubscribed from further  updates.</p> <pre><code>def subscription_handler(account_info_obj, update_nr, subscription_id):\n\n    if update_nr == 0:\n        print('Initial account data:', account_info_obj.value)\n\n    if update_nr &gt; 0:\n        # Do something with the update\n        print('Account data changed:', account_info_obj.value)\n\n    # The execution will block until an arbitrary value is returned, which will be the result of the `query`\n    if update_nr &gt; 5:\n        return account_info_obj\n\n\nresult = substrate.query(\"System\", \"Account\", [\"5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY\"],\n                         subscription_handler=subscription_handler)\n\nprint(result)\n</code></pre>"},{"location":"usage/subscriptions/#subscribe-to-multiple-storage-keys","title":"Subscribe to multiple storage keys","text":"<p>To subscribe to multiple storage keys at once, the function <code>subscribe_storage()</code> provides the most efficient method. This will track changes for multiple state entries (storage keys) in just one RPC call to the Substrate node.</p> <p>Same as for <code>query()</code>, updates will be pushed to the <code>subscription_handler</code> callable and will block execution until  a final value is returned. This value will be returned as a result of subscription and finally automatically unsubscribed from further updates.</p> <pre><code>def subscription_handler(storage_key, updated_obj, update_nr, subscription_id):\n    print(f\"Update for {storage_key.params[0]}: {updated_obj.value}\")\n\n# Accounts to track\nstorage_keys = [\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\"]\n    ),\n    substrate.create_storage_key(\n        \"System\", \"Account\", [\"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\"]\n    )\n]\n\nresult = substrate.subscribe_storage(\n    storage_keys=storage_keys, subscription_handler=subscription_handler\n)\n</code></pre>"},{"location":"usage/subscriptions/#subscribe-to-new-block-headers","title":"Subscribe to new block headers","text":"<pre><code>def subscription_handler(obj, update_nr, subscription_id):\n    print(f\"New block #{obj['header']['number']}\")\n\n    block = substrate.get_block(block_number=obj['header']['number'])\n\n    for idx, extrinsic in enumerate(block['extrinsics']):\n        print(f'# {idx}:  {extrinsic.value}')\n\n    if update_nr &gt; 10:\n        return {'message': 'Subscription will cancel when a value is returned', 'updates_processed': update_nr}\n\n\nresult = substrate.subscribe_block_headers(subscription_handler)\n</code></pre>"},{"location":"usage/using-scaletype-objects/","title":"Using ScaleType objects","text":"<p>The result of the previous storage query example is a <code>ScaleType</code> object, more specific a <code>Struct</code>. </p> <p>The nested object structure of this <code>account_info</code> object is as follows: <pre><code>account_info = &lt;AccountInfo(value={'nonce': &lt;U32(value=5)&gt;, 'consumers': &lt;U32(value=0)&gt;, 'providers': &lt;U32(value=1)&gt;, 'sufficients': &lt;U32(value=0)&gt;, 'data': &lt;AccountData(value={'free': 1152921503981846391, 'reserved': 0, 'misc_frozen': 0, 'fee_frozen': 0})&gt;})&gt;\n</code></pre></p> <p>Every <code>ScaleType</code> have the following characteristics:</p>"},{"location":"usage/using-scaletype-objects/#shorthand-lookup-of-nested-types","title":"Shorthand lookup of nested types","text":"<p>Inside the <code>AccountInfo</code> struct there are several <code>U32</code> objects that represents for example a nonce or the amount of provider,  also another struct object <code>AccountData</code> which contains more nested types. </p> <p>To access these nested structures you can access those formally using:</p> <p><code>account_info.value_object['data'].value_object['free']</code></p> <p>As a convenient shorthand you can also use:</p> <p><code>account_info['data']['free']</code></p> <p><code>ScaleType</code> objects can also be automatically converted to an iterable, so if the object is for example the <code>others</code> in the result Struct of <code>Staking.eraStakers</code> can be iterated via:</p> <pre><code>for other_info in era_stakers['others']:\n    print(other_info['who'], other_info['value'])\n</code></pre>"},{"location":"usage/using-scaletype-objects/#serializable","title":"Serializable","text":"<p>Each <code>ScaleType</code> holds a complete serialized version of itself in the <code>account_info.serialize()</code> property, so it can easily store or used to create JSON strings.</p> <p>So the whole result of <code>account_info.serialize()</code> will be a <code>dict</code> containing the following:</p> <pre><code>{\n    \"nonce\": 5,\n    \"consumers\": 0,\n    \"providers\": 1,\n    \"sufficients\": 0,\n    \"data\": {\n        \"free\": 1152921503981846391,\n        \"reserved\": 0,\n        \"misc_frozen\": 0,\n        \"fee_frozen\": 0\n    }\n}\n</code></pre>"},{"location":"usage/using-scaletype-objects/#comparing-values-with-scaletype-objects","title":"Comparing values with <code>ScaleType</code> objects","text":"<p>It is possible to compare ScaleType objects directly to Python primitives, internally the serialized <code>value</code> attribute is compared:</p> <pre><code>metadata_obj[1][1]['extrinsic']['version'] # '&lt;U8(value=4)&gt;'\nmetadata_obj[1][1]['extrinsic']['version'] == 4 # True\n</code></pre>"}]}